/**
 * This file is mostly copied from vercel/sandbox-sdk in order to
 * use the auth token generated by `vercel/vercel/cli`, making minimal
 * changes in order to avoid a dependency on the CLI package.
 */

import fs from 'node:fs';
import path from 'node:path';
import XDGAppPaths from 'xdg-app-paths';
import { z } from 'zod';

// Types aren't inferred correctly. Typescript wants us to call `.default` on the imported module,
// but the actual underlying JS code exposes the code top-level, so we need to cast it here.
const getXDGAppPaths = (app: string) => {
  return (
    XDGAppPaths as unknown as (app: string) => { dataDirs: () => string[] }
  )(app);
};

const vercelDirectories = getXDGAppPaths('com.vercel.cli').dataDirs();

const AuthFile = z.object({
  token: z.string().min(1),
  refresh_token: z.string().min(1).optional(),
  expiresAt: z.number().optional(),
});

type AuthFile = z.infer<typeof AuthFile>;

// Returns whether a directory exists
const isDirectory = (path: string): boolean => {
  try {
    return fs.lstatSync(path).isDirectory();
  } catch (_) {
    // We don't care which kind of error occured, it isn't a directory anyway.
    return false;
  }
};

// Returns in which directory the config should be present
const getGlobalPathConfig = (): string => {
  // The customPath flag is the preferred location,
  // followed by the vercel directory.
  // (Legacy "now" directory is no longer supported)
  // If none of those exist, use the vercel directory.
  return (
    vercelDirectories.find((configPath) => isDirectory(configPath)) ||
    vercelDirectories[0]
  );
};

export const getAuth = () => {
  try {
    const pathname = path.join(getGlobalPathConfig(), 'auth.json');
    return AuthFile.parse(JSON.parse(fs.readFileSync(pathname, 'utf8')));
  } catch {
    return null;
  }
};

export async function updateAuthConfig(
  config: Partial<AuthFile>
): Promise<void> {
  const pathname = path.join(getGlobalPathConfig(), 'auth.json');
  fs.mkdirSync(path.dirname(pathname), { recursive: true });
  fs.writeFileSync(pathname, JSON.stringify(config, null, 2) + '\n');
}
